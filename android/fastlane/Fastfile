default_platform(:android)

platform :android do

  desc "move all the files to separate folder to upload them as artifacts"
  
  lane :move_files do

    version = File.read(File.join(File.dirname(__FILE__), '..', '..', 'pubspec.yaml')).match(/version: (.+)/)[1]
    buildCode = version.split('+')[0]

    buildNumber = ENV['CI_JOB_ID']

    if buildNumber == nil
        buildNumber = version.split('+')[1]
    end

    job = ENV['CI_JOB_ID']
    if job == nil
        job = '-1000'
    end


    buildNumber = buildNumber.slice(0, 8)

    file_prefix ="WALK-#{git_branch}-#{buildCode}+#{buildNumber}".split("\n").first
    sh("cd .. && cd .. && mkdir -p build/artifacts")
    sh("mv ../../build/app/outputs/flutter-apk/app-release.apk ../../build/artifacts/#{file_prefix}.apk")
    sh("mv ../../build/app/outputs/flutter-apk/app-release.apk.sha1 ../../build/artifacts/#{file_prefix}.apk.sha1")
    sh("mv ../../build/app/outputs/apk/release/output-metadata.json ../../build/artifacts/output-metadata.json")
    sh("mv ../../build/app/outputs/bundle/release/app-release.aab ../../build/artifacts/#{file_prefix}.aab")

    dataToWrite = buildCode.split("\n").first + ',' + buildNumber.split("\n").first + ',' + job + ',' + sh("cd .. && cd .. && pwd | tr -d '\n'") + '/build/artifacts/' + file_prefix.split("\n").first + ".aab"
    sh("echo #{dataWrite} > ../../build/artifacts/metadata.dat")
  end

  
  desc "Submit a new build to playstore internal testing"
  lane :playstore_internal_release do
   
    comps =     File.read("../../build/artifacts/metadata.dat").split("\n").first.split(",")
       version = comps[0]
       build = comps[1]
       job = comps[2]
       aabPath = comps[3]
   
       supply(
           track: 'internal',
           version_name: build + " (" + version + ")",
           version_code: build,
           aab: aabPath,
           skip_upload_apk: true,
           skip_upload_metadata: true,
           skip_upload_changelogs: true,
           skip_upload_images: true,
           skip_upload_screenshots: true
       )
  end
end
